
unit SellAll;

interface

procedure MustBeSoldMassive;
procedure TradeItems(Items:array of cardinal);

Implementation

              uses SysUtils, Classes;

procedure MustBeSoldMassive;
var
i,j,count:integer;
IgnoreID,IL:TStringList;
Item : TL2Item;
massive: array of cardinal;
begin
  IgnoreID := TStringList.Create();
  IgnoreID.LoadFromFile('C:\Maps\IgnoreID.txt');
  IL := TStringList.Create;
  for i:=0 to Inventory.User.Count-1 do begin
    Item := Inventory.User.Items(i);
    if (IgnoreID.IndexOf(inttostr(Item.ID)) = -1) and (not Item.Equipped) then begin
      IL.Add(inttostr(Item.ID));
      IL.Add(inttostr(Item.Count));      
    end;
  end;
  IgnoreID.Free;
 
  //??????? ??????
  count := IL.Count;
  if count>0 then begin
    if count>40 then begin
      j := 0;
      for i:=0 to count-1 do begin        
        if j < 40  then begin
          setlength(massive,j+1);
          massive[j] := strtoint(IL[i]);
        end else begin
          TradeItems(massive);
          setlength(massive,0);
          j:=0;
          setlength(massive,j+1);
          massive[j] := strtoint(IL[i]);
        end;
        j:=j+1;
      end;
      TradeItems(massive);
    end else begin
      setlength(massive, count);
      for i:=0 to count-1 do massive[i] := strtoint(IL[i]);
      TradeItems(massive);
    end;
  end;
  setlength(massive,0);
  IL.Free;
end;

procedure TradeItems(Items:array of cardinal);
var
i,count:integer;
IgnoreID:TStringList;
oneitem:array of cardinal;
begin
  IgnoreID := TStringList.Create();
  IgnoreID.LoadFromFile('C:\Maps\IgnoreID.txt');
  count := IgnoreID.Count;
  if not Engine.NPCTrade(true, Items) then begin
    Print('?? ????????? ??????? ? ???????!');
    for i:=0 to length(Items)-1 do begin
      setlength(oneitem,2);
      oneitem[0]:=Items[i];
      oneitem[1]:=Items[i+1];
      if not Engine.NPCTrade(true, oneitem) then begin
        print('?? ?????? ??????? '+inttostr(oneitem[0]));
             
      end;
      i:=i+1;
      setlength(oneitem,0);
    end;
  end;

  IgnoreID.Free;  
end;

begin

end.